local t = {
    __EXAMPLE = function ()
        print("这是一个示例函数")
    end,
}

--[[
    CONST_FUNCTIONS用于存放所有静态函数
    由于网络通信时不能将函数作为参数传入，因此，可以预先将所有函数保存在此表中，在需要时传递字符串

    这样，某一端收到字符串后，可以根据字符串自行在此表中检索相应的函数，变相实现了函数的跨端传递
    框架的Func.lua中提供了经过简单封装的功能。欲访问CONST_FUNCTIONS中的函数，你可以使用下文展示的任何一种写法：
        Func("FuncName")
        Func["FuncName"]
        Func.FuncName
    以上三种写法完全等价，会返回相同的结果

    ※  如果你的游戏较为复杂，需要使用大量的函数
    ※  你可以将函数分类，并分为数个文件存储，从而方便后续的函数编写和修改工作
    ※  只需要在Func.lua的Register表中记录对应的文件名，在游戏的初始化阶段即会自动读取

    ※※  CONST_FUNCTIONS设计用于存储静态的函数，在不修改框架的相关代码的前提下，不允许开发者对CONST_FUNCTIONS进行修改

    ※  如果A文件与B文件中含有名字相同的函数，再次导入发现同名函数时会自动跳过该函数，并抛出一个警告
]]


return t